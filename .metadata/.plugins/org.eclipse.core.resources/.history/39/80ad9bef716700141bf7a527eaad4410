package com.compsci408.androidrx.provider;

import java.util.ArrayList;
import java.util.List;

import com.compsci408.androidrx.R;
import com.compsci408.rxcore.datatypes.Patient;

import android.app.Activity;
import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Filter;
import android.widget.TextView;

public class PatientListAdapter extends ArrayAdapter<Patient> {
	
	Context mContext;
	int mLayoutId;
	
	List<Patient> mData = null;
	
	
	public PatientListAdapter(Context context, int layoutResource, List<Patient> data) {
		super(context, layoutResource, data);
		mContext = context;
		mLayoutId = layoutResource;
		mData = data;		
	}
	
	
	static class PatientHolder {
		TextView name;
	}

	
	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
		View row = convertView;
		PatientHolder holder = null;
		
		if (row == null) {
			LayoutInflater inflater = ((Activity) mContext).getLayoutInflater();
			row = inflater.inflate(mLayoutId, parent, false);
			
			holder = new PatientHolder();
			holder.name = (TextView) row.findViewById(android.R.id.text1);
			
			row.setTag(holder);
			
		}
		
		else {
			holder = (PatientHolder) row.getTag();
		}
		
		Patient patient = mData.get(position);
		holder.name.setText(patient.getName());
		
		return row;
	}
	
	@Override
	public Filter getFilter(){
	   return new Filter(){

	        @Override
	        protected FilterResults performFiltering(CharSequence constraint) {
	             constraint = constraint.toString().toLowerCase();
	             FilterResults result = new FilterResults();

	                if (constraint != null && constraint.toString().length() > 0) {
	                  List<String> founded = new ArrayList<String>();
	                        for(Patient item : mData){
	                            if(item.getName().toLowerCase().contains(constraint)){
	                                founded.add(item.getName());
	                            }
	                    }

	                        result.values = founded;
	                        result.count = founded.size();
	                    }else {
	                        result.values = mData;
	                        result.count = mData.size();
	                    }
	            return result;


	    }
	    @Override
	    protected void publishResults(CharSequence constraint, FilterResults results) {
	           clear();
	           for (Patient item : (List<Patient>) results.values) {
	                 add(item);
	           }
	    notifyDataSetChanged();

	    }
	   };
	}
}
