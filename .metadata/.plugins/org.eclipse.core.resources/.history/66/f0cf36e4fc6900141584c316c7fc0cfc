package com.compsci408.androidrx.provider;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import com.compsci408.androidrx.provider.PatientListAdapter.PatientHolder;
import com.compsci408.rxcore.datatypes.Patient;
import com.compsci408.rxcore.datatypes.Schedule;

import android.app.Activity;
import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Filter;
import android.widget.TextView;


public class PatientScheduleAdapter extends ArrayAdapter<Schedule> {
	
	Context mContext;
	int mLayoutId;
	
	List<Schedule> mData;
	
	public PatientScheduleAdapter(Context context, int layoutResource, List<Schedule> data) {
		super(context, layoutResource, data);
		mContext = context;
		mLayoutId = layoutResource;
		mData = data;	
	}
	
	
	static class PatientHolder {
		TextView name;
	}

	
	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
		View row = convertView;
		PatientHolder holder = null;
		
		if (row == null) {
			LayoutInflater inflater = ((Activity) mContext).getLayoutInflater();
			row = inflater.inflate(mLayoutId, parent, false);
			
			holder = new PatientHolder();
			holder.name = (TextView) row.findViewById(android.R.id.text1);
			
			row.setTag(holder);
			
		}
		
		else {
			holder = (PatientHolder) row.getTag();
		}
		
		Patient patient = mFilteredData.get(position);
		holder.name.setText(patient.getName());
		
		return row;
	}
	
	
	/**
	 * Custom filter which allows for results to be
	 * narrowed by a search query.
	 */
	@Override
	public Filter getFilter(){
	   return new Filter(){

	        @Override
	        protected FilterResults performFiltering(CharSequence constraint) {
	             constraint = constraint.toString().toLowerCase(Locale.US);
	             FilterResults result = new FilterResults();

	                if (constraint != null) {
	                	List<Patient> matches = new ArrayList<Patient>();
                        for(Patient item : mOriginalData){
                            if(item.getName().toLowerCase(Locale.US).contains(constraint)
                            		|| constraint.length() == 0){
                                matches.add(item);
                            }
	                    }

                        result.values = matches;
                        result.count = matches.size();
	                } 
	                
	                else {
	                    result.values = mOriginalData;
	                    result.count = mOriginalData.size();
                    }
	            
	            return result;
	        }
	   
		    @SuppressWarnings("unchecked")
			@Override
		    protected void publishResults(CharSequence constraint, FilterResults results) {
		    	clear();
		    	List<Patient> values = (List<Patient>) results.values;
				for (Patient item : values) {
			             add(item);
			    }
				notifyDataSetChanged();
	
		    }
		};
	}
}

}
