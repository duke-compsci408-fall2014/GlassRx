package com.compsci408.androidrx.adapters;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import com.compsci408.androidrx.R;
import com.compsci408.rxcore.Constants;
import com.compsci408.rxcore.datatypes.Prescription;
import com.compsci408.rxcore.datatypes.TimeFrame;

import android.app.Activity;
import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ImageButton;
import android.widget.TextView;

public class PrescriptionAdapter extends ArrayAdapter<Prescription> {

	private List<Prescription> mData;
	
	Context mContext;
	int mLayoutId;	
	private OnClickListener deleteListener;
	
	public PrescriptionAdapter(Context context, int resource, List<Prescription> objects,
			OnClickListener listener) {
		super(context, resource, objects);
		mData = objects;
		mContext = context;
		mLayoutId = resource;
		deleteListener = listener;
	}
	
	public List<Prescription> getData() {
		return mData;
	}
	
	static class PrescriptionHolder {
		TextView name;
		TextView date;
		TextView time;
		ImageButton delete;
	}
	
	@Override
	public View getView(final int position, View convertView, ViewGroup parent) {
		View row = convertView;
		PrescriptionHolder holder = null;
		
		if (row == null) {
			LayoutInflater inflater = ((Activity) mContext).getLayoutInflater();
			row = inflater.inflate(mLayoutId, parent, false);
			
			holder = new PrescriptionHolder();
			holder.name = (TextView) row.findViewById(R.id.textview_prescription_name);
			holder.date = (TextView) row.findViewById(R.id.textview_prescription_date);
			holder.time = (TextView) row.findViewById(R.id.textview_prescription_time);	
			holder.delete = (ImageButton) row.findViewById(R.id.imagebutton_delete_event);
			
			holder.delete.setTag(position);
			
			row.setTag(holder);
			
		}
		
		else {
			holder = (PrescriptionHolder) row.getTag();
		}
		
		final Prescription prescription = this.getItem((position);
		holder.name.setText(prescription.getMedication());
		holder.date.setText(formatDate(prescription.getDay_to_take()) + " in the");
		holder.time.setText(formatTime(prescription.getGeneral_time()));
		
		holder.delete.setOnClickListener(deleteListener);
		return row;
	}

	private String formatDate(String day_to_take) {
		Date d;
		try {
			d = new SimpleDateFormat(Constants.DATE_FORMAT_DATABASE, Locale.US).parse(day_to_take);
			return new SimpleDateFormat(Constants.DATE_FORMAT_READABLE, Locale.US).format(d);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		return day_to_take;
		
	}

	private CharSequence formatTime(int general_time) {
		for(TimeFrame tf : TimeFrame.values()) {
			if (tf.getId() == general_time) {
				return tf.getName();
			}
		}
		return "No time";
	}

}
