package com.compsci408.androidrx.provider;

import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import com.compsci408.androidrx.R;
import com.compsci408.rxcore.Controller;
import android.app.Fragment;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.TimePicker;

public class NewPrescriptionFragment extends Fragment {
	
	Button buttonDone;
	Button buttonBack;
	
	CheckBox cbMorning;
	CheckBox cbAfternoon;
	CheckBox cbEvening;
	CheckBox cbRepeat;
	
	CheckBox[] timesArray;
	
	Spinner spinnerRepeatInterval;
	EditText etRepeatCount;
	TextView tvRepeatLabel;
	
	View[] repeatForm;
	
    boolean repeatEnabled = false;

	private GregorianCalendar mDate;
	
	private Controller mController;
	
	@Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View view =  inflater.inflate(R.layout.fragment_new_prescription, container, false);
        
        mController = Controller.getInstance(getActivity());
        
        buttonBack = (Button) view.findViewById(R.id.button_go_back);
        buttonDone = (Button) view.findViewById(R.id.button_add_complete);
        
        cbRepeat = (CheckBox) view.findViewById(R.id.checkbox_repeat);

        cbMorning = (CheckBox) view.findViewById(R.id.checkbox_morning);
        cbAfternoon = (CheckBox) view.findViewById(R.id.checkbox_afternoon);
        cbEvening = (CheckBox) view.findViewById(R.id.checkbox_evening);
        
        timesArray = new CheckBox[]{cbMorning, cbAfternoon, cbEvening};
        
        spinnerRepeatInterval = (Spinner) view.findViewById(R.id.spinner_repeat_interval);
        etRepeatCount = (EditText) view.findViewById(R.id.edittext_repeat_count);
        tvRepeatLabel = (TextView) view.findViewById(R.id.textview_repeat_label);
        
        repeatForm = new View[]{spinnerRepeatInterval, etRepeatCount, tvRepeatLabel};
        
        setListeners();
        
        
        return view;
    }
	

	private void setListeners() {
		
		cbRepeat.setOnCheckedChangeListener(new OnCheckedChangeListener() {

			@Override
			public void onCheckedChanged(CompoundButton buttonView,
					boolean isChecked) {
				if (isChecked) {
					repeatEnabled = true;
					for (View v : repeatForm) {
						v.setVisibility(View.VISIBLE);
					}
				}
				else {
					repeatEnabled = false;
				}
				
				
			}
			
		})
		
		buttonBack.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				((NewPrescriptionActivity) getActivity()).makeNewCalendar(true);
			}
			
		});
		
		buttonDone.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				boolean[] times = new boolean[timesArray.length];
				
				for(int i = 0; i < times.length; i++) {
					if (timesArray[i].isChecked()) {
						times[i] = true;
					}
					else {
						times[i] = false;
					}
				}
				
				List<String> dates = getDates();
				
				((NewPrescriptionActivity) getActivity()).addPrescriptions(times, 
			}
			
		});
	}
	
	private List<String> getDates() {
		
	}
	
	public void setDate(GregorianCalendar date) {
		mDate = date;
	}

}
