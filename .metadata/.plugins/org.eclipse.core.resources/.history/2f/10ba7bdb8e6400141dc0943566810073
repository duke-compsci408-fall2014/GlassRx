package com.compsci408.rxcore;

import java.util.ArrayList;
import java.util.List;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONException;
import org.json.JSONObject;

import com.compsci408.rxcore.alarms.Alarm;
import com.compsci408.rxcore.datatypes.AccountType;
import com.compsci408.rxcore.datatypes.Medication;
import com.compsci408.rxcore.datatypes.Patient;
import com.compsci408.rxcore.listeners.OnAlarmAddedListener;
import com.compsci408.rxcore.listeners.OnMedInfoLoadedListener;
import com.compsci408.rxcore.listeners.OnPatientsLoadedListener;
import com.compsci408.rxcore.requests.RequestUtils;
import com.compsci408.rxcore.requests.ResponseCallback;
import com.compsci408.rxcore.requests.ServerRequest;
import com.google.gson.Gson;

import android.content.Context;

public class Controller {
	
	public static Controller instance;
	
	private static Context mContext;
	private static ServerRequest mServerRequest;
	
	private String mUsername;
	private int mPatientId;
	private String mPatientName;
	private String mMedName;
	private int mMedId = 1;
	
	//  Listeners for performing UI updates
	OnMedInfoLoadedListener mOnMedInfoLoadedListener;
	
	
	
	public static Controller getInstance(Context ctxt) {
		if (instance == null) {
			instance = new Controller();
		}
		instance.setContext(ctxt);
		mServerRequest = ServerRequest.getInstance(getContext());
		return instance;
	}
	
	public static Context getContext() {
		return mContext;
	}

	public void setContext(Context mContext) {
		Controller.mContext = mContext;
	}	
	
	public String getUsername() {
		return mUsername;
	}

	public void setUsername(String mUsername) {
		this.mUsername = mUsername;
	}

	public int getPatientId() {
		return mPatientId;
	}

	public void setPatientId(int mPatientId) {
		this.mPatientId = mPatientId;
	}
	
	public String getMedName() {
		return mMedName;
	}
	
	public void setMedName(String mMedName) {
		this.mMedName = mMedName;
	}

	public int getMedId() {
		return mMedId;
	}

	public void setMedId(int mMedId) {
		this.mMedId = mMedId;
	}
	
	/**
	 * Log user with given username and password into the system.
	 * @param username Username entered by user
	 * @param password Password entered by user
	 * @param accountType Account type selected (patient or provider)
	 * @param callback ResponseCallback from server
	 * @return Response string from server
	 */
	public void logIn(String username, String password, String accountType, ResponseCallback callback) {
		
		setUsername(username);
		mServerRequest.doGet(getLogInURL(username, accountType), callback, null);
	}
	
	/**
	 * Construct the appropriate log in url
	 * @param username Username entered by user
	 * @param accountType  Account type selected by user
	 * @return URL needed to log in given user
	 */
	private String getLogInURL(String username, String accountType) {
		if (accountType.equals(AccountType.PATIENT.getName())) {
			return Constants.URL_LOG_IN_PATIENT + username + "%27&app_name=glass-rx";
		}
			return Constants.URL_LOG_IN_PROVIDER + username + "%27&app_name=glass-rx";
	}
	
	/**
	 * Log user out of system
	 * @param username Username entered by user
	 * @return Response string from server
	 */
	public String logOut(String username) {
		//TODO:  Implement log out
		return "";
	}
	
	/**
	 * Get all alarms associated with given patient
	 * @param patientId Id of patient
	 * @return List of {@link Alarm}s for given patient
	 */
	public List<Alarm> getAllAlarms(int patientId) {
		//TODO:  Implement function
		return null;
	}
	
	
	/**
	 * Get alarm which will occur soonest from now
	 * @param alarms List of {@link Alarm}s
	 * @return Next alarm to occur
	 */
	public Alarm getNextAlarm(List<Alarm> alarms) {
		//TODO:  Implement function
		return null;
	}
	
	
	/**
	 * Add an alarm to the database
	 * @param alarm Alarm to be added
	 * @return Response string from server
	 */
	public void addAlarm(Alarm alarm, final OnAlarmAddedListener listener) {
		
		String json = new Gson().toJson(alarm, Alarm.class);
		
		mServerRequest.doPost(Constants.URL_ADD_ALARM, new ResponseCallback() {

			@Override
			public void onResponseReceived(JSONObject response) {
				try {
					boolean result = response.getBoolean(Constants.RESPONSE_SUCCESS);
					listener.onAlarmAdded(result);
				} catch (JSONException e) {
					// TODO Improve exception handling
					e.printStackTrace();
				}
				
			}
			
		}, json);
	}
	
	/**
	 * Remove alarm with the given Id from the database
	 * @param alarmId Id of {@link Alarm} to be removed
	 * @return Response string from server
	 */
	public String removeAlarm(int alarmId) {
		//TODO:  Implement function
		return "";
	}
	
	public List<Patient> getPatients(int providerId, final OnPatientsLoadedListener listener) {
		
		
		return null;
	}
	
	public void getMedInfo(final OnMedInfoLoadedListener listener) {
		
		List<NameValuePair> params = new ArrayList<NameValuePair>();
		params.add(new BasicNameValuePair(Constants.MED_ID, Integer.toString(mMedId)));
		
		mServerRequest.doGet(Constants.URL_GET_MED, new ResponseCallback() {

			@Override
			public void onResponseReceived(JSONObject response) {
				Medication med = new Gson().fromJson(response.toString(), Medication.class);
				listener.onMedInfoLoaded(med);
			}
			
		}, params);
	}


}
